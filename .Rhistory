results <- tournament_sim(p_win = p)
results$overview
results$played_matches
results$true_winrate
df_true_rates %>%
ggplot(aes(x = probability_theoretical, y = win_rate_observed))+
geom_point()+
scale_x_continuous(name="expected win rates", limits=c(0.1, 0.9),
n.breaks = 9)+
scale_y_continuous(name="average observed win rates", limits=c(0.0, 1.0),
n.breaks = 11)+
ggtitle("Average observed win rate in relation to a fixed expected win rate")+
theme(plot.title = element_text(hjust= 0.5))+
geom_abline(slope = 1, colour = "red")
RNGkind("L'Ecuyer-CMRG")
set.seed(0911)
true_w_rates <- tournament_stats_truewinrate(10000)
tournament_stats_truewinrate <- function(n, rates = win_rates) {
store <- matrix(nrow = length(rates), ncol=n)
for (i in 1 : length(rates)) {
prob <- rates[i]
store[i,] <- unlist(mclapply(1:n, function(i){
as.numeric(tournament_sim(p_win = prob)[3]) # output of tournament_sim is
}, mc.cores = 6, mc.set.seed = TRUE))                           # now true_winrate, as numeric
}
return(store)
}
RNGkind("L'Ecuyer-CMRG")
set.seed(0911)
true_w_rates <- tournament_stats_truewinrate(10000)
df_true_rates <- bootstrap_problem_two(n_straps = 1000, store = true_w_rates)
df_true_rates$diff <- df_true_rates$average_value - df_true_rates$Prob
df_true_rates <- df_true_rates%>%
rename(p = 1,
win_rate_observed = 2,
difference = 3)
print(df_true_rates)
df_true_rates %>%
ggplot(aes(x = p, y = win_rate_observed))+
geom_point()+
scale_x_continuous(name="expected win rates", limits=c(0.1, 0.9),
n.breaks = 9)+
scale_y_continuous(name="average observed win rates", limits=c(0.0, 1.0),
n.breaks = 11)+
ggtitle("Average observed win rate in relation to a fixed expected win rate")+
theme(plot.title = element_text(hjust= 0.5))+
geom_abline(slope = 1, colour = "red")
### Practical 1
# libraries
library(tidyverse)
library(readr)
library(ggplot2)
library(dplyr)
library(car)
library(pedometrics)
EIA <- read.csv("EIA.csv")
EIA <- read.csv("EIA.csv")
variance <- c()
for (i in 1 : (length(prob) - 1)) {
variance[i] <- var(prob[1 : (i + 1)])
}
library(tidyverse)
library(parallel)
library(scales)
library(bibtex)
# Setting seed for parallel computing:
RNGkind("L'Ecuyer-CMRG")
set.seed(0911)
RNGkind("L'Ecuyer-CMRG")
set.seed(0911)
probability_calculator <- function(n) {
X <- rnorm(n, mean = 4, sd = sqrt(10))
Y <- runif(n, min = 2, max = 8)
# Calculating Pr(X>Y)
Pr_hat <- sum(X > Y) / n
output <- list(X = X,
Y = Y,
Pr_hat = Pr_hat)
return(output)
}
results <- probability_calculator(100000)
print(results[3])
# Function for bootstrap procedure, using parallel computing technique for
# speeding up the computation.
bootstrap_multicore_problem1 <- function(n_straps, vec1 = X, vec2 = Y) {
prob_vector <- unlist(mclapply(1:n_straps, function(n = n, vec1 = X, vec2 = Y) {
# sampling both vectors X & Y
resX <- vec1[sample(1 : length(vec1), length(vec1), replace = TRUE)]
resY <- vec2[sample(1 : length(vec2), length(vec2), replace = TRUE)]
Prob <- sum(resX > resY) / length(resX) # calculating Pr(X>Y) of each
return(Prob)                            # bootstrap sample
}, mc.cores = 6, mc.set.seed = TRUE))
return(prob_vector)
}
RNGkind("L'Ecuyer-CMRG")
set.seed(0911)
X <- unlist(results[1]) #transforming the output of the probability_calculator
Y <- unlist(results[2]) #function into vectors
#!!! as I use 3000 bootstraps, computation can take some time!!!
prob_vec <- bootstrap_multicore_problem1(n_straps = 3000)
quantile(prob_vec, c(0.025, 0.5, 0.975))
df_probabilities <- as.data.frame(prob_vec)
df_probabilities %>%
ggplot(aes(x = prob_vec)) +
geom_histogram(aes (y = ..density..),
bins = 20,
colour = 1,
fill = "white")+
geom_density(lwd = 1.2,
linetype = 2,
colour = "blue")+
xlab("Pr(X>Y)")+
ggtitle("Distribution of Pr(X>Y)")+
theme(plot.title = element_text(hjust= 0.5))+
geom_vline(xintercept = median(prob_vec), colour = "red", lty='dashed', lwd=1)
RNGkind("L'Ecuyer-CMRG")
set.seed(0911)
# vector for the number of simulations/deviates, as a sequence from 5 to 300k
# by steps of 100.
n_deviates <- seq(5, 300000, by = 100)
# Generating n deviates, corresponding to the vector defined above, and
# calculating Pr(X>Y) from the used deviates.
prob <- unlist(mclapply(n_deviates, function(i) {
x <- rnorm(i, mean = 4, sd = sqrt(10))
y <- runif(i, min = 2, max = 8)
prob <- sum(x > y) / length(x)
deviates <- i
return(prob)
}, mc.cores = 6, mc.set.seed = TRUE)
)
results_1.3 <- data.frame(prob, n_deviates)
results_1.3 %>%
ggplot(aes(x = n_deviates, y = prob)) +
geom_point(alpha = 1/4)+
geom_hline(yintercept = median(prob), colour = "red", lty='dashed', lwd=0.5)+
xlab("number of simulations")+
ggtitle("Pr(X>Y) in relation to the number of simulations")+
scale_y_continuous(name="Pr(X>Y)", limits=c(0.35, 0.45), labels = label_number_si())+
scale_x_continuous(name="number of simulations", labels = label_number_si())+
theme(plot.title = element_text(hjust= 0.5))
variance <- c()
for (i in 1 : (length(prob) - 1)) {
variance[i] <- var(prob[1 : (i + 1)])
}
results_1.3.2 <- data.frame(variance, n_deviates[2:3000])
results_1.3.2 %>%
ggplot(aes(x = n_deviates.2.3000., y = variance))+
geom_point(alpha = 1/4)+
scale_y_continuous(name="variance of Pr(X>Y)", labels = label_number_si())+
scale_x_continuous(name="number of simulations", labels = label_number_si())+
ggtitle("Variance of Pr(X>Y) in relation to the number of simulations")+
theme(plot.title = element_text(hjust= 0.5))+
xlim(c(0, 50000))
variance <- c()
for (i in 1 : (length(prob) - 1)) {
variance[i] <- var(prob[1 : (i + 1)])
}
results_1.3.2 <- data.frame(variance, n_deviates[2:3000])
results_1.3.2 %>%
ggplot(aes(x = n_deviates.2.3000., y = variance))+
geom_point(alpha = 1/4)+
scale_y_continuous(name="variance of Pr(X>Y)", labels = label_number_si())+
ggtitle("Variance of Pr(X>Y) in relation to the number of simulations")+
theme(plot.title = element_text(hjust= 0.5))+
xlim(c(0, 5000))
variance <- c()
for (i in 1 : (length(prob) - 1)) {
variance[i] <- var(prob[1 : (i + 1)])
}
results_1.3.2 <- data.frame(variance, n_deviates[2:3000])
results_1.3.2 %>%
ggplot(aes(x = n_deviates.2.3000., y = variance))+
geom_point(alpha = 1/4)+
scale_y_continuous(name="variance of Pr(X>Y)", labels = label_number_si())+
ggtitle("Variance of Pr(X>Y) in relation to the number of simulations")+
theme(plot.title = element_text(hjust= 0.5))+
xlim(c(0, 20000))
variance <- c()
for (i in 1 : (length(prob) - 1)) {
variance[i] <- var(prob[1 : (i + 1)])
}
results_1.3.2 <- data.frame(variance, n_deviates[2:3000])
results_1.3.2 %>%
ggplot(aes(x = n_deviates.2.3000., y = variance))+
geom_point(alpha = 1/4)+
scale_y_continuous(name="variance of Pr(X>Y)", labels = label_number_si())+
ggtitle("Variance of Pr(X>Y) in relation to the number of simulations")+
theme(plot.title = element_text(hjust= 0.5))+
xlim(c(0, 20000))+
xlab("number of simulations")
variance <- c()
for (i in 1 : (length(prob) - 1)) {
variance[i] <- var(prob[1 : (i + 1)])
}
results_1.3.2 <- data.frame(variance, n_deviates[2:3000])
results_1.3.2 %>%
ggplot(aes(x = n_deviates.2.3000., y = variance))+
geom_point(alpha = 1/4)+
scale_y_continuous(name="variance of Pr(X>Y)", labels = label_number_si())+
ggtitle("Variance of Pr(X>Y) in relation to the number of simulations")+
theme(plot.title = element_text(hjust= 0.5))+
xlim(c(0, 20000))+
xlab("number of simulations")+
geom_hline(yintercept = 0.001)
variance <- c()
for (i in 1 : (length(prob) - 1)) {
variance[i] <- var(prob[1 : (i + 1)])
}
results_1.3.2 <- data.frame(variance, n_deviates[2:3000])
results_1.3.2 %>%
ggplot(aes(x = n_deviates.2.3000., y = variance))+
geom_point(alpha = 1/4)+
scale_y_continuous(name="variance of Pr(X>Y)", labels = label_number_si())+
ggtitle("Variance of Pr(X>Y) in relation to the number of simulations")+
theme(plot.title = element_text(hjust= 0.5))+
xlim(c(0, 20000))+
xlab("number of simulations")+
geom_hline(yintercept = 0.001, color = "red", lty='dashed', lwd=0.5)
variance <- c()
for (i in 1 : (length(prob) - 1)) {
variance[i] <- var(prob[1 : (i + 1)])
}
results_1.3.2 <- data.frame(variance, n_deviates[2:3000])
results_1.3.2 %>%
ggplot(aes(x = n_deviates.2.3000., y = variance))+
geom_line(alpha = 1/4)+
scale_y_continuous(name="variance of Pr(X>Y)", labels = label_number_si())+
ggtitle("Variance of Pr(X>Y) in relation to the number of simulations")+
theme(plot.title = element_text(hjust= 0.5))+
xlim(c(0, 20000))+
xlab("number of simulations")+
geom_hline(yintercept = 0.001, color = "red", lty='dashed', lwd=0.5)
variance <- c()
for (i in 1 : (length(prob) - 1)) {
variance[i] <- var(prob[1 : (i + 1)])
}
results_1.3.2 <- data.frame(variance, n_deviates[2:3000])
results_1.3.2 %>%
ggplot(aes(x = n_deviates.2.3000., y = variance))+
geom_line()+
scale_y_continuous(name="variance of Pr(X>Y)", labels = label_number_si())+
ggtitle("Variance of Pr(X>Y) in relation to the number of simulations")+
theme(plot.title = element_text(hjust= 0.5))+
xlim(c(0, 20000))+
xlab("number of simulations")+
geom_hline(yintercept = 0.001, color = "red", lty='dashed', lwd=0.5)
variance <- c()
for (i in 1 : (length(prob) - 1)) {
variance[i] <- var(prob[1 : (i + 1)])
}
results_1.3.2 <- data.frame(variance, n_deviates[2:3000])
results_1.3.2 %>%
ggplot(aes(x = n_deviates.2.3000., y = variance))+
geom_line()+
scale_y_continuous(name="variance of Pr(X>Y)", labels = label_number_si())+
ggtitle("Variance of Pr(X>Y) in relation to the number of simulations")+
theme(plot.title = element_text(hjust= 0.5))+
xlim(c(0, 20000))+
xlab("number of simulations")+
geom_hline(yintercept = 0.001, color = "red", lty='dashed', lwd=0.5)
RNGkind("L'Ecuyer-CMRG")
set.seed(0911)
#1000 bootstraps
results_2.1 <- bootstrap_problem_two(1000, table_n_matches)
# Generating a bootstrap function with number of straps and matrix of results
# as Input. Generates a Data.frame as Output, containing the average value of
# the sample's medians and the corresponding win rate.
bootstrap_problem_two <- function(n_straps, store){
# generating a store matrix with 9 rows (one per win rate) and one column
# per bootstrap, storing the median of the bootstrap sample
avg_storer <- matrix(nrow = 9, ncol = n_straps)
for (j in 1 : 9){ # 9 iterations (as we use 9 win rates)
#bootstrap and calculate the mean of each bootstrap sample
avg_storer[j,] <- unlist(mclapply(1 : n_straps, function(i){
mean(store[j, sample(1 : dim(store)[2], size = dim(store)[2],
replace = TRUE)])
}, mc.cores = 6, mc.set.seed = TRUE))
}
# generating a vector to store the median of each row
substore <- rep(NA, 9)
# calculating the median of each row of avg_storer
for (i in 1 : 9) {
substore[i] <- mean(avg_storer[i,])
}
# binding together the win rate and its corresponding average matches per
# tournament
output <- data.frame(Prob = seq(from = 0.1, to = 0.90, by = 0.1),
average_value = substore)
return(output)
}
RNGkind("L'Ecuyer-CMRG")
set.seed(0911)
#1000 bootstraps
results_2.1 <- bootstrap_problem_two(1000, table_n_matches)
results_2.1$delta <- c(0, sapply(1:8, function(i) {
results_2.1$average_value[i+1] - results_2.1$average_value[i]
}))
results_2.1 <- results_2.1 %>%
rename(p = 1,
matches_played = 2)
print(results_2.1)
tournament_stats_ngames <- function(n, rates = win_rates) {
# generating a matrix for storing the results
store <- matrix(nrow = length(rates), ncol=n)
# iterations i are corresponding the the number of rates the algorithm
# shall take into consideration
for (i in 1 : length(rates)) {
prob <- rates[i]
# simulating n tournaments per win rate and storing the number of matches
# played into the matrix "store"
store[i,] <- unlist(mclapply(1 : n, function(i){
as.integer(tournament_sim(p_win = prob)[1])
}, mc.cores = 6, mc.set.seed = TRUE))
}
return(store)
}
# Generating a vector containing the win rates of interest
win_rates <- seq(from = 0.1, to = 0.90, by = 0.1)
# function for simulating the tournament
tournament_sim <- function(p_win) {
p_loss <- 1 - p_win #loss rate
outcome <- c("win", "loss")
results_storage <- c() #empty vector for storing match results
# as you never play more than 9 games
# (6 wins + 3 losses (=9) or 2 losses and 7 wins (=9))
for (i in 1 : 9) {
# simulating matches with sampling from c("win", "loss") with given
# probabilities and replacement.
# Adding the result to storage vector.
results_storage <- c(sample(outcome, size = 1,
replace = TRUE,
prob = c(p_win, p_loss)), results_storage)
# Conditions for winning or loosing the tournament
if (length(results_storage[results_storage == "win"]) == 7) {
break
}
if (length(results_storage[results_storage == "loss"]) == 3) {
break
}
}
true_winrate <- (sum(str_count(results_storage, pattern = "win")) /
length(results_storage))
#binding output together as a list
output <- list(played_matches = length(results_storage),
overview = table(results_storage),
true_winrate = true_winrate)
return(output)
}
tournament_stats_ngames <- function(n, rates = win_rates) {
# generating a matrix for storing the results
store <- matrix(nrow = length(rates), ncol=n)
# iterations i are corresponding the the number of rates the algorithm
# shall take into consideration
for (i in 1 : length(rates)) {
prob <- rates[i]
# simulating n tournaments per win rate and storing the number of matches
# played into the matrix "store"
store[i,] <- unlist(mclapply(1 : n, function(i){
as.integer(tournament_sim(p_win = prob)[1])
}, mc.cores = 6, mc.set.seed = TRUE))
}
return(store)
}
RNGkind("L'Ecuyer-CMRG")
set.seed(0911)
# simulating 10,000 tournaments per fixed win rate (variable win_rates [0.1, 0.9] is
# set as default)
table_n_matches <- tournament_stats_ngames(n = 10000)
# Generating a bootstrap function with number of straps and matrix of results
# as Input. Generates a Data.frame as Output, containing the average value of
# the sample's medians and the corresponding win rate.
bootstrap_problem_two <- function(n_straps, store){
# generating a store matrix with 9 rows (one per win rate) and one column
# per bootstrap, storing the median of the bootstrap sample
avg_storer <- matrix(nrow = 9, ncol = n_straps)
for (j in 1 : 9){ # 9 iterations (as we use 9 win rates)
#bootstrap and calculate the mean of each bootstrap sample
avg_storer[j,] <- unlist(mclapply(1 : n_straps, function(i){
mean(store[j, sample(1 : dim(store)[2], size = dim(store)[2],
replace = TRUE)])
}, mc.cores = 6, mc.set.seed = TRUE))
}
# generating a vector to store the median of each row
substore <- rep(NA, 9)
# calculating the median of each row of avg_storer
for (i in 1 : 9) {
substore[i] <- mean(avg_storer[i,])
}
# binding together the win rate and its corresponding average matches per
# tournament
output <- data.frame(Prob = seq(from = 0.1, to = 0.90, by = 0.1),
average_value = substore)
return(output)
}
RNGkind("L'Ecuyer-CMRG")
set.seed(0911)
#1000 bootstraps
results_2.1 <- bootstrap_problem_two(1000, table_n_matches)
results_2.1$delta <- c(0, sapply(1:8, function(i) {
results_2.1$average_value[i+1] - results_2.1$average_value[i]
}))
results_2.1 <- results_2.1 %>%
rename(p = 1,
matches_played = 2)
print(results_2.1)
results_2.1 %>%
ggplot(aes(x = p, y = matches_played))+
geom_point()+
geom_line(color = "red")+
scale_x_continuous(name="expected win rate (p)", limits=c(0.1, 0.9),
n.breaks = 9)+
scale_y_continuous(name="average matches played", limits=c(0, 9),
n.breaks = 9)+
ggtitle("Average number of played matches in relation to a fixed theoretical win rate")+
theme(plot.title = element_text(hjust= 0.5))
df_f1 <- data.frame(p, y, z) %>%
rename(function1 = 2,
function2 = 3)
# Using simple grid optimization
p <- seq(0.1, 0.95, 0.001) #vector with fixed win rates
y <- unlist(lapply(p, function(i){ # f(p)_1
(choose(9,7) * i^7 * (1 - i)^2)
}))
index_max1 <- which.max(y) # index for maximum of f(p)_1
maximum_func1 <- p[index_max1]
z <- unlist(lapply(p, function(i){ # f(p)_2
(choose(9,3) * (1-i)^3 * (1 - (1-i))^6)
}))
index_max2 <- which.max(z) # index for maximum of f(p)_2
maximum_func2 <- p[index_max2]
df_f1 <- data.frame(p, y, z) %>%
rename(function1 = 2,
function2 = 3)
df_f1 %>%
ggplot(mapping = (aes(x = p)))+
geom_line(aes(y = function1, color = "function1"))+
geom_line(aes(y = function2, color = "function2"))+
geom_vline(xintercept = maximum_func1, colour = "red", lty='dashed', lwd=1)+
geom_vline(xintercept = maximum_func2, colour = "red", lty='dashed', lwd=1)+
labs(x = "expected win rate",
y = "P(n_games = 9)",
color = "Legend")+
scale_colour_manual("",
breaks = c("function1", "function2"),
values = c("function1"="lightblue", "function2"="darkblue"))
# Using simple grid optimization
p <- seq(0.1, 0.95, 0.001) #vector with fixed win rates
y <- unlist(lapply(p, function(i){ # f(p)_1
(choose(9,7) * i^7 * (1 - i)^2)
}))
index_max1 <- which.max(y) # index for maximum of f(p)_1
maximum_func1 <- p[index_max1]
z <- unlist(lapply(p, function(i){ # f(p)_2
(choose(9,3) * (1-i)^3 * (1 - (1-i))^6)
}))
index_max2 <- which.max(z) # index for maximum of f(p)_2
maximum_func2 <- p[index_max2]
df_f1_2 <- data.frame(p, y, z) %>% #
rename(function1 = 2,
function2 = 3)
df_f1_2 %>%
ggplot(mapping = (aes(x = p)))+
geom_line(aes(y = function1, color = "function1"))+
geom_line(aes(y = function2, color = "function2"))+
geom_vline(xintercept = maximum_func1, colour = "red", lty='dashed', lwd=1)+
geom_vline(xintercept = maximum_func2, colour = "red", lty='dashed', lwd=1)+
labs(x = "expected win rate",
y = "P(n_games = 9)",
color = "Legend")+
scale_colour_manual("",
breaks = c("function1", "function2"),
values = c("function1"="lightblue", "function2"="darkblue"))
RNGkind("L'Ecuyer-CMRG")
set.seed(0911)
# simulating 10k tournaments
true_w_rates <- tournament_stats_truewinrate(10000)
tournament_stats_truewinrate <- function(n, rates = win_rates) {
store <- matrix(nrow = length(rates), ncol=n)
for (i in 1 : length(rates)) {
prob <- rates[i]
store[i,] <- unlist(mclapply(1:n, function(i){
as.numeric(tournament_sim(p_win = prob)[3]) # output of tournament_sim is
}, mc.cores = 6, mc.set.seed = TRUE)) # now true_winrate, as numeric
}
return(store)
}
RNGkind("L'Ecuyer-CMRG")
set.seed(0911)
# simulating 10k tournaments
true_w_rates <- tournament_stats_truewinrate(10000)
# generating 1000 bootstraps
df_true_rates <- bootstrap_problem_two(n_straps = 1000, store = true_w_rates)
# calculating difference between observed vs. expected
df_true_rates$diff <- df_true_rates$average_value - df_true_rates$Prob
df_true_rates <- df_true_rates%>% #renaming
rename(p = 1,
win_rate_observed = 2,
difference = 3)
print(df_true_rates)
df_true_rates %>%
ggplot(aes(x = p, y = win_rate_observed))+
geom_point()+
scale_x_continuous(name="expected win rates", limits=c(0.1, 0.9),
n.breaks = 9)+
scale_y_continuous(name="average observed win rates", limits=c(0.0, 1.0),
n.breaks = 11)+
ggtitle("Average observed win rate in relation to a fixed expected win rate")+
theme(plot.title = element_text(hjust= 0.5))+
geom_abline(slope = 1, colour = "red")
load("~/Desktop/MSc Appld. Statistic/Software for Data Analysis/Assignment 2/MT5763-assingment2/.RData")
load("~/Desktop/MSc Appld. Statistic/Software for Data Analysis/Assignment 2/MT5763-assingment2/.RData")
load("~/Desktop/MSc Appld. Statistic/Software for Data Analysis/Assignment 2/MT5763-assingment2/.RData")
